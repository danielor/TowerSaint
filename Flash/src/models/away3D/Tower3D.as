//AS3ExporterAIR version 2.3, code Flash 10, generated by Prefab3D: http://www.closier.nl/prefab
package models.away3D
{
	import away3d.containers.ObjectContainer3D;
	import away3d.containers.Scene3D;
	import away3d.core.base.*;
	import away3d.loaders.data.*;
	import away3d.loaders.utils.*;
	import away3d.materials.*;
	import away3d.primitives.*;
	
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.filters.BitmapFilterQuality;
	import flash.filters.DropShadowFilter;
	import flash.filters.GlowFilter;
	import flash.geom.*;
	import flash.utils.Dictionary;
	
	import models.interfaces.FilteredObject;

	public class Tower3D extends ObjectContainer3D implements FilteredObject
	{
		[Embed(source="assets/pictures/TowerLevel0Top.jpg")]
		private var Cone_Bitmap_Bitmap:Class;

		[Embed(source="assets/pictures/TowerLevel0Bottom.jpg")]
		private var Cylinder_cylinder002_Bitmap_Bitmap:Class;

		private var objs:Object = {};
		private var geos:Array = [];
		private var oList:Array =[];
		private var focusFilters:Array = [];									// Focus filters draw a shadow around the object
		private var aC:Array;
		private var aV:Array;
		private var aU:Array;
		private var _scale:Number;

		public function Tower3D(scale:Number = 1)
		{
			_scale = scale;
			setSource();
			createFilters();
			addContainers();
			buildMeshes();
			buildMaterials();
			cleanUp();
		}
		
		
		private function createFilters():void {
			// First object
			var gF:GlowFilter = new GlowFilter(0xFFFFFF,0,6.0,6.0,2,BitmapFilterQuality.MEDIUM,false, false);
			var gF2:GlowFilter = new GlowFilter(0xFFFFFF,0,6.0,6.0,2,BitmapFilterQuality.MEDIUM,false, false);
			focusFilters.push(gF);
			focusFilters.push(gF2);
		}
		
		// The Filtered Object interface
		public function updateFilter(i:Number):void{
			for(var k:int = 0; k < focusFilters.length; k++){
				var gf:GlowFilter = focusFilters[k] as GlowFilter;
				gf.alpha = i;
			}
		}
		public function changeFilterState(b:Boolean):void {
			for(var k:int = 0; k < focusFilters.length; k++){
				var gf:GlowFilter = focusFilters[k] as GlowFilter;
				if(b){
					gf.alpha = 1;
				}else{
					gf.alpha = 0;
				}
			}
		}

		private function buildMeshes():void
		{
			var m0:Matrix3D = new Matrix3D();
			m0.rawData = Vector.<Number>([1,0,0,0,0,1,0,0,0,0,1,0,12.600049999999996*_scale,770.30735*_scale,64.6*_scale,1]);
			transform = m0;

			objs.obj0 = {name:"Cone",  transform:m0, pivotPoint:new Vector3D(0,0,0), container:0, bothsides:false, material:null, ownCanvas:true, pushfront:false, pushback:false};
			objs.obj0.geo=geos[0];
			var m1:Matrix3D = new Matrix3D();
			m1.rawData = Vector.<Number>([1,0,0,0,0,1,0,0,0,0,1,0,12.599999999999994*_scale,325.46180000000004*_scale,64.6*_scale,1]);
			transform = m1;

			objs.obj1 = {name:"Cylinder_Cylinder002",  transform:m1, pivotPoint:new Vector3D(0,0,0), container:0, bothsides:false, material:null, ownCanvas:true, pushfront:false, pushback:false};
			objs.obj1.geo=geos[1];

			var ref:Object;
			var mesh:Mesh;
			var j:int;
			var av:Array;
			var au:Array;
			var v0:Vertex;
			var v1:Vertex;
			var v2:Vertex;
			var u0:UV;
			var u1:UV;
			var u2:UV;
			var aRef:Vector.<Face>;
			for(var i:int = 0;i<2;++i){
				ref = objs["obj"+i];
				if(ref != null){
					mesh = new Mesh();
					mesh.type = ".as";
					mesh.bothsides = ref.bothsides;
					mesh.name = ref.name;
					mesh.pushfront = ref.pushfront;
					mesh.pushback = ref.pushback;
					mesh.ownCanvas = ref.ownCanvas;
					mesh.filters = [focusFilters[i]];
					if(aC[ref.container]!= null)
						aC[ref.container].addChild(mesh);

					oList.push(mesh);
					mesh.transform = ref.transform;
					mesh.movePivot(ref.pivotPoint.x, ref.pivotPoint.y, ref.pivotPoint.z);
					if (ref.geo.geometry != null) {
						mesh.geometry = ref.geo.geometry;
						continue;
					}
					ref.geo.geometry = new Geometry();
					mesh.geometry = ref.geo.geometry;
					aRef = ref.geo.f;
					for(j = 0;j<aRef.length;++j){
						Face(aRef[j]).material = ref.material;
						ref.geo.geometry.addFace( Face(aRef[j]));
					}

				}
			}
		}

		private function setSource():void
		{
			var geo0vert:String ="-0.000011c37937da393b/84.3995ac157e03/1.3ea78fa49dc2de-e,-0.000011c37937da393b/-84.3995ac157e03/b6.1746,-22.151d4f14d43fc/-84.3995ac157e03/b3.0369,-43.a4dd/-84.3995ac157e03/a8.3f58a7823401,-61.502d2f75cdff/-84.3995ac157e03/97.4ad7a237f403,-7c.34b5b3301e01/-84.3995ac157e03/81.47b,-92.bf6d/-84.3995ac157e03/65.1160,-a2.12d31/-84.3995ac157e03/45.4fb547117002,-ac.13745/-84.3995ac157e03/23.38a25d3aec01,-b0.471d/-84.3995ac157e03/1.3ea78fa49dc2de-e,-ac.13745/-84.3995ac157e03/-23.38a25d3aebff,-a2.12d31/-84.3995ac157e03/-45.4fb547116fff,-92.bf6d/-84.3995ac157e03/-65.28744e997fff,-7c.34b5b3301e01/-84.3995ac157e03/-81.47c,-61.502d2f75cdff/-84.3995ac157e03/-97.4ad7a237f3fe,-43.a4d3/-84.3995ac157e03/-a8.1b36,-22.151d4f14d43fc/-84.3995ac157e03/-b3.0369,0.000011c37937e6edd6/-84.3995ac157e03/-b6.1746,22.9119/-84.3995ac157e03/-b3.0369,43.266049fc7e01/-84.3995ac157e03/-a8.1b35,61.1585b/-84.3995ac157e03/-97.2024,7c.34b5b3301e01/-84.3995ac157e03/-81.47b,92.bf6d/-84.3995ac157e03/-65.2871fa8d9bfe,a2.12d31/-84.3995ac157e03/-45.4fb2f3058bff,ac.1373b/-84.3995ac157e03/-23.389db52323ff,b0.471d/-84.3995ac157e03/0.000470de4df8ac688,ac.13731/-84.3995ac157e03/23.23686353b0810,a2.12d1d/-84.3995ac157e03/45.223e,92.2c8d35863a02/-84.3995ac157e03/65.2878f6b14801,7c.e24f/-84.3995ac157e03/81.47d,61.502633522201/-84.3995ac157e03/97.337,43.a4b5/-84.3995ac157e03/a8.3f5d4f99fc02,22.21c182640e01/-84.3995ac157e03/b3.036a,-0.000011c37937da393b/-84.3995ac157e03/1.3ea78fa49dc2de-e";
			var geo0uvs:String ="0.270f/0,0.5/1,0/0";
			var geo0faces:String ="0,1,2,0,1,2,2,3,0,0,1,2,3,4,0,0,1,2,4,5,0,0,1,2,5,6,0,0,1,2,6,7,0,0,1,2,7,8,0,0,1,2,8,9,0,0,1,2,9,a,0,0,1,2,a,b,0,0,1,2,b,c,0,0,1,2,c,d,0,0,1,2,d,e,0,0,1,2,e,f,0,0,1,2,f,10,0,0,1,2,10,11,0,0,1,2,11,12,0,0,1,2,12,13,0,0,1,2,13,14,0,0,1,2,14,15,0,0,1,2,15,16,0,0,1,2,16,17,0,0,1,2,17,18,0,0,1,2,18,19,0,0,1,2,19,1a,0,0,1,2,1a,1b,0,0,1,2,1b,1c,0,0,1,2,1c,1d,0,0,1,2,1d,1e,0,0,1,2,1e,1f,0,0,1,2,1f,20,0,0,1,2,20,1,0,0,1,2,2,1,21,0,1,2,3,2,21,0,1,2,4,3,21,0,1,2,5,4,21,0,1,2,6,5,21,0,1,2,7,6,21,0,1,2,8,7,21,0,1,2,9,8,21,0,1,2,a,9,21,0,1,2,b,a,21,0,1,2,c,b,21,0,1,2,d,c,21,0,1,2,e,d,21,0,1,2,f,e,21,0,1,2,10,f,21,0,1,2,11,10,21,0,1,2,12,11,21,0,1,2,13,12,21,0,1,2,14,13,21,0,1,2,15,14,21,0,1,2,16,15,21,0,1,2,17,16,21,0,1,2,18,17,21,0,1,2,19,18,21,0,1,2,1a,19,21,0,1,2,1b,1a,21,0,1,2,1c,1b,21,0,1,2,1d,1c,21,0,1,2,1e,1d,21,0,1,2,1f,1e,21,0,1,2,20,1f,21,0,1,2,21,1,20,0,1,2";
			var geo0:FacesDefinition = new FacesDefinition();
			geo0.f = buildFaces( geo0faces.split(","),  buildVertices(read(geo0vert).split(",")), buildUVs(read(geo0uvs).split(",")) );
			geos.push(geo0);
			var geo1vert:String ="-13.1ceeecc30cff9/-138.539/62.0311,5.1f53c7d24ee17e-f/-138.539/64,5.1f53c7d24ee17e-f/-138.539/1.3ea78fa49dc2de-e,-0.00071afd498c2ef9/138.539/64,-13.1cf1d5d1e9ff9/138.539/62.0311,5.1f53c7d24ee17e-f/138.539/1.3ea78fa49dc2de-e,-26.f404763177fc/-138.539/5c.184,-26.f433071f47fc/138.539/5c.2347802bbc02,-37.32a8aab6c7ff/-138.539/53.d5e9c473802,-37.1fac53c119ffb/138.539/53.5bd,-46.40a3461aabff/-138.539/46.40a3461aac02,-46.40a59a268ffe/138.539/46.1bc2,-53.d5e9c4737ff/-138.539/37.32a8aab6c801,-53.d60f0531bfe/138.539/37.32a656aae402,-5c.184/-138.539/26.1866d89e8c01,-5c.184/138.539/26.18648492a802,-62.0311/-138.539/13.2e4b146b4801,-62.0312/138.539/13.1ced783b9e808,-64/-138.539/1.3ea78fa49dc2de-e,-64/138.539/-0.00071afd498c2ef9,-62.0311/-138.539/-13.1ceeecc30cff9,-62.0311/138.539/-13.1cf1d5d1e9ff9,-5c.184/-138.539/-26.1866d89e8bff,-5c.2347802bbbff/138.539/-26.18692caa6fff,-53.d5e9c4737ff/-138.539/-37.32a8aab6c7ff,-53.5bd/138.539/-37.32aafec2abff,-46.40a3461aabff/-138.539/-46.40a3461aabff,-46.1bc2/138.539/-46.40a3461aabff,-37.32a8aab6c7ff/-138.539/-53.d5e9c4737ff,-37.32a8aab6c7ff/138.539/-53.d5c483b53ff,-26.f404763177fc/-138.539/-5c.2349d4379fff,-26.a7c/138.539/-5c.2347802bbbff,-13.1ceeecc30cff9/-138.539/-62.0723b87623ff,-13.1cf0614a7b7fd/138.539/-62.0723b87623ff,5.1f53c7d24ee17e-f/-138.539/-63.5af3107a3fff,-0.000038d7ea4c5ab11/138.539/-63.5af3107a3fff,13.1cf0614a7b807/-138.539/-62.0723b87623ff,13.1ced783b9e808/138.539/-62.0723b87623ff,26.18692caa7001/-138.539/-5c.2347802bbbff,26.a7a/138.539/-5c.2349d4379fff,37.1faadf39ab805/-138.539/-53.d5c483b53ff,37.32a4029f0001/138.539/-53.d5e9c4737ff,46.40a3461aac02/-138.539/-46.40a0f20ec7ff,46.409e9e02e401/138.539/-46.40a59a268fff,53.d5e9c473802/-138.539/-37.32a8aab6c7ff,53.d59f42f7001/138.539/-37.1fac53c119ffb,5c.184/-138.539/-26.1866d89e8bff,5c.23452c1fd803/138.539/-26.186dd4c237ff,62.07260c820802/-138.539/-13.2e48c05f63ff,62.0311/138.539/-13.1cf4bee0c6ff8,64/-138.539/0.00038d7ea4c8a202,64/138.539/-0.000e35fa93185df2,62.0311/-138.539/13.2e4d68772c01,62.07260c820802/138.539/13.2e41c43bb801,5c.2347802bbc02/-138.539/26.a7c,5c.234c28438402/138.539/26.a77,53.5bd/-138.539/37.1faadf39ab805,53.d65986ae402/138.539/37.15be,46.1bc2/-138.539/46.1bc4,46.1bc7/138.539/46.1bbf,37.15c1/-138.539/53.d5e9c473802,37.32b44ef23c02/138.539/53.d57a0238c02,26.a7a/-138.539/5c.184,26.a81/138.539/5c.2342d813f401,13.1ced783b9e808/-138.539/62.07260c820802,13.2e5b60be8401/138.539/62.0721646a4002";
			var geo1uvs:String ="0.270f/0,0.5/1,0/0";
			var geo1faces:String ="0,1,2,0,1,2,3,4,5,0,1,2,6,0,2,0,1,2,4,7,5,0,1,2,8,6,2,0,1,2,7,9,5,0,1,2,a,8,2,0,1,2,9,b,5,0,1,2,c,a,2,0,1,2,b,d,5,0,1,2,e,c,2,0,1,2,d,f,5,0,1,2,10,e,2,0,1,2,f,11,5,0,1,2,12,10,2,0,1,2,11,13,5,0,1,2,14,12,2,0,1,2,13,15,5,0,1,2,16,14,2,0,1,2,15,17,5,0,1,2,18,16,2,0,1,2,17,19,5,0,1,2,1a,18,2,0,1,2,19,1b,5,0,1,2,1c,1a,2,0,1,2,1b,1d,5,0,1,2,1e,1c,2,0,1,2,1d,1f,5,0,1,2,20,1e,2,0,1,2,1f,21,5,0,1,2,22,20,2,0,1,2,21,23,5,0,1,2,24,22,2,0,1,2,23,25,5,0,1,2,26,24,2,0,1,2,25,27,5,0,1,2,28,26,2,0,1,2,27,29,5,0,1,2,2a,28,2,0,1,2,29,2b,5,0,1,2,2c,2a,2,0,1,2,2b,2d,5,0,1,2,2e,2c,2,0,1,2,2d,2f,5,0,1,2,30,2e,2,0,1,2,2f,31,5,0,1,2,32,30,2,0,1,2,31,33,5,0,1,2,34,32,2,0,1,2,33,35,5,0,1,2,36,34,2,0,1,2,35,37,5,0,1,2,38,36,2,0,1,2,37,39,5,0,1,2,3a,38,2,0,1,2,39,3b,5,0,1,2,3c,3a,2,0,1,2,3b,3d,5,0,1,2,3e,3c,2,0,1,2,3d,3f,5,0,1,2,40,3e,2,0,1,2,3f,41,5,0,1,2,2,1,40,0,1,2,41,3,5,0,1,2,3,1,0,0,1,2,4,3,0,0,1,2,4,0,6,0,1,2,7,4,6,0,1,2,7,6,8,0,1,2,9,7,8,0,1,2,9,8,a,0,1,2,b,9,a,0,1,2,b,a,c,0,1,2,d,b,c,0,1,2,d,c,e,0,1,2,f,d,e,0,1,2,f,e,10,0,1,2,11,f,10,0,1,2,11,10,12,0,1,2,13,11,12,0,1,2,13,12,14,0,1,2,15,13,14,0,1,2,15,14,16,0,1,2,17,15,16,0,1,2,17,16,18,0,1,2,19,17,18,0,1,2,19,18,1a,0,1,2,1b,19,1a,0,1,2,1b,1a,1c,0,1,2,1d,1b,1c,0,1,2,1d,1c,1e,0,1,2,1f,1d,1e,0,1,2,1f,1e,20,0,1,2,21,1f,20,0,1,2,21,20,22,0,1,2,23,21,22,0,1,2,23,22,24,0,1,2,25,23,24,0,1,2,25,24,26,0,1,2,27,25,26,0,1,2,27,26,28,0,1,2,29,27,28,0,1,2,29,28,2a,0,1,2,2b,29,2a,0,1,2,2b,2a,2c,0,1,2,2d,2b,2c,0,1,2,2d,2c,2e,0,1,2,2f,2d,2e,0,1,2,2f,2e,30,0,1,2,31,2f,30,0,1,2,31,30,32,0,1,2,33,31,32,0,1,2,33,32,34,0,1,2,35,33,34,0,1,2,35,34,36,0,1,2,37,35,36,0,1,2,37,36,38,0,1,2,39,37,38,0,1,2,39,38,3a,0,1,2,3b,39,3a,0,1,2,3b,3a,3c,0,1,2,3d,3b,3c,0,1,2,3d,3c,3e,0,1,2,3f,3d,3e,0,1,2,3f,3e,40,0,1,2,41,3f,40,0,1,2,1,3,41,0,1,2,40,1,41,0,1,2";
			var geo1:FacesDefinition = new FacesDefinition();
			geo1.f = buildFaces( geo1faces.split(","),  buildVertices(read(geo1vert).split(",")), buildUVs(read(geo1uvs).split(",")) );
			geos.push(geo1);
		}

		private function buildFaces(aFaces:Array, vVerts:Vector.<Vertex>, vUVs:Vector.<UV>):Vector.<Face>
		{
			var vFaces:Vector.<Face> = new Vector.<Face>();
			var f:Face;
			for(var i:int = 0;i<aFaces.length;i+=6){
				f = new Face( vVerts[parseInt(aFaces[i], 16)],
									vVerts[parseInt(aFaces[i+1], 16)],
									vVerts[parseInt(aFaces[i+2], 16)],
									null,
									vUVs[parseInt(aFaces[i+3], 16)],
									vUVs[parseInt(aFaces[i+4], 16)],
									vUVs[parseInt(aFaces[i+5], 16)]);
				vFaces.push(f);
			}

			return vFaces;
		}

		private function buildVertices(aVerts:Array):Vector.<Vertex>
		{
			var tmpv:Array;
			var vVerts:Vector.<Vertex> = new Vector.<Vertex>();
			for(var i:int = 0;i<aVerts.length;i++){
				tmpv = aVerts[i].split("/");
				vVerts[i] = new Vertex( parseFloat(tmpv[0])*_scale, parseFloat(tmpv[1])*_scale, parseFloat(tmpv[2])*_scale  );
			}
			return vVerts;
		}

		private function buildUVs(aUvs:Array):Vector.<UV>
		{
			var tmpv:Array;
			var vUVs:Vector.<UV> = new Vector.<UV>();
			for(var i:int = 0;i<aUvs.length;++i){
				tmpv = aUvs[i].split("/");
				vUVs[i] = new UV(parseFloat(tmpv[0]), parseFloat(tmpv[1]));
			}

			return vUVs;
		}


		private function buildMaterials():void
		{
				var cone_Bitmap:Bitmap = new Cone_Bitmap_Bitmap();
				applyMaterialToMesh("Cone", cone_Bitmap.bitmapData);

				var cylinder_cylinder002_Bitmap:Bitmap = new Cylinder_cylinder002_Bitmap_Bitmap();
				applyMaterialToMesh("Cylinder_Cylinder002", cylinder_cylinder002_Bitmap.bitmapData);

		}

		private function applyMaterialToMesh(id:String, bmd:BitmapData):void
		{
			for(var i:int;i<meshes.length;++i){
				if(meshes[i].name == id){
					if(!bmd){
						trace("Embed of "+id+" failed! Check source path or if CS4 call 911!");
					} else {
					meshes[i].material = new BitmapMaterial(bmd);
					}
					break;
				}
			}
		}

		private function cleanUp():void
		{
			for(var i:int = 0;i<2;++i){
				objs["obj"+i] == null;
			}
			aV = null;
			aU = null;
		}

		private function addContainers():void
		{
			aC = [];
			aC.push(this);
			var m0:Matrix3D = new Matrix3D();
			m0.rawData = Vector.<Number>([1,0,0,0,0,1,0,0,0,0,1,0,0*_scale,0*_scale,0*_scale,1]);
			transform = m0;
			name = "main";

		}

		public function get containers():Array
		{
			return aC;
		}


		public function get meshes():Array
		{
			return oList;
		}


		private function read(str:String):String
		{
			var start:int= 0;
			var chunk:String;
			var end:int= 0;
			var dec:String = "";
			var charcount:int = str.length;
			for(var i:int = 0;i<charcount;++i){
				if (str.charCodeAt(i)>=44 && str.charCodeAt(i)<= 48 ){
					dec+= str.substring(i, i+1);
				}else{
					start = i;
					chunk = "";
					while(str.charCodeAt(i)!=44 && str.charCodeAt(i)!= 45 && str.charCodeAt(i)!= 46 && str.charCodeAt(i)!= 47 && i<=charcount){
						i++;
					}
					chunk = ""+parseInt("0x"+str.substring(start, i), 16 );
					dec+= chunk;
					i--;
				}
			}
			return dec;
		}

	}
}
class FacesDefinition
{
	import away3d.core.base.Face;
	import away3d.core.base.Geometry;
	public var f:Vector.<Face>;
	public var geometry:Geometry;
}