//AS3ExporterAIR version 2.3, code Flash 10, generated by Prefab3D: http://www.closier.nl/prefab
package models.away3D.buildings
{
	import away3d.containers.ObjectContainer3D;
	import away3d.containers.Scene3D;
	import away3d.materials.*;
	import away3d.core.base.*;
	import away3d.loaders.utils.*;
	import away3d.loaders.data.*;
	import flash.utils.Dictionary;
	import away3d.primitives.*;
	import flash.display.Bitmap;
	import flash.display.BitmapData;

	import flash.geom.*;

	public class ManaProduction3D extends ObjectContainer3D
	{
		[Embed(source="assets/pictures/building/ManaProduction_UV.jpg")]
		private var Aw_0_Bitmap_Bitmap:Class;

		private var objs:Object = {};
		private var geos:Array = [];
		private var oList:Array =[];
		private var aC:Array;
		private var aV:Array;
		private var aU:Array;
		private var _scale:Number;

		public function ManaProduction3D(scale:Number = 1)
		{
			_scale = scale;
			setSource();
			addContainers();
			buildMeshes();
			buildMaterials();
			cleanUp();
		}

		private function buildMeshes():void
		{
			var m0:Matrix3D = new Matrix3D();
			m0.rawData = Vector.<Number>([1,0,0,0,0,1,0,0,0,0,1,0,-0.4941000000000031*_scale,160.68395*_scale,-1.1940000000000026*_scale,1]);
			transform = m0;

			objs.obj0 = {name:"aw_0",  transform:m0, pivotPoint:new Vector3D(0,0,0), container:0, bothsides:false, material:null, ownCanvas:false, pushfront:false, pushback:false};
			objs.obj0.geo=geos[0];

			var ref:Object;
			var mesh:Mesh;
			var j:int;
			var av:Array;
			var au:Array;
			var v0:Vertex;
			var v1:Vertex;
			var v2:Vertex;
			var u0:UV;
			var u1:UV;
			var u2:UV;
			var aRef:Vector.<Face>;
			for(var i:int = 0;i<1;++i){
				ref = objs["obj"+i];
				if(ref != null){
					mesh = new Mesh();
					mesh.type = ".as";
					mesh.bothsides = ref.bothsides;
					mesh.name = ref.name;
					mesh.pushfront = ref.pushfront;
					mesh.pushback = ref.pushback;
					mesh.ownCanvas = ref.ownCanvas;
					if(aC[ref.container]!= null)
						aC[ref.container].addChild(mesh);

					oList.push(mesh);
					mesh.transform = ref.transform;
					mesh.movePivot(ref.pivotPoint.x, ref.pivotPoint.y, ref.pivotPoint.z);
					if (ref.geo.geometry != null) {
						mesh.geometry = ref.geo.geometry;
						continue;
					}
					ref.geo.geometry = new Geometry();
					mesh.geometry = ref.geo.geometry;
					aRef = ref.geo.f;
					for(j = 0;j<aRef.length;++j){
						Face(aRef[j]).material = ref.material;
						ref.geo.geometry.addFace( Face(aRef[j]));
					}

				}
			}
		}

		private function setSource():void
		{
			var geo0vert:String ="-4b.15aa/-84.0cfd/2b.235403eba5805,-57.f3/-84.0cfd/2.179be9b898106de-f,-5a.c86/-9b.a023/2.179be9b898106de-f,-4e.897/-9b.a023/2d.e944674ac01,-43.1cec/-6e.6185/27.b,-4e.897/-6e.6185/2.179be9b898106de-f,-27.63f41675f7fc/-6e.6185/43.1ced,-2b.1847/-84.0cfd/4b.32731da54c01,-2d.643/-9b.a023/4e.13fff2237c01,3.3dbef0cdb687fe-f/-84.0cfd/57.f3,3.3dbef0cdb687fe-f/-9b.a023/5a.c86,3.3dbef0cdb687fe-f/-6e.6185/4e.13fff2237c01,27.b/-6e.6185/43.1ced,2b.235403eba5805/-84.0cfd/4b.32731da54c01,2d.e944674ac01/-9b.a023/4e.13fff2237c01,4b.15aa/-84.0cfd/2b.235403eba5805,4e.13fff2237c01/-9b.a023/2d.e944674ac01,43.4356c7e63001/-6e.6185/27.b,4e.13fff2237c01/-6e.6185/2.179be9b898106de-f,57.f3/-84.0cfd/2.179be9b898106de-f,5a.c86/-9b.a023/2.179be9b898106de-f,4b.15aa/-84.0cfd/-2b.1847,4e.13fff2237c01/-9b.a023/-2d.e944674abff,27.b/-6e.6185/-43.1cec,43.4356c7e63001/-6e.6185/-27.63f41675f7fc,2b.235403eba5805/-84.0cfd/-4b.15aa,2d.e944674ac01/-9b.a023/-4e.897,3.3dbef0cdb687fe-f/-84.0cfd/-57.161774d253ff,3.3dbef0cdb687fe-f/-9b.a023/-5a.c86,3.3dbef0cdb687fe-f/-6e.6185/-4e.897,-4b.15aa/-84.0cfd/-2b.1847,-2b.1847/-84.0cfd/-4b.15aa,-2d.643/-9b.a023/-4e.897,-4e.897/-9b.a023/-2d.e944674abff,-43.1cec/-6e.6185/-27.63f41675f7fc,-27.a012317afff/-6e.6185/-43.1cec,-2b.1847/-84.0cfd/-4b.15aa,-27.a012317afff/-6e.6185/-43.1cec,-43.1cec/-6e.6185/-27.63f41675f7fc,-4b.15aa/-84.0cfd/-2b.1847,-2d.643/-9b.a023/-4e.897,-4e.897/-9b.a023/-2d.e944674abff,2b.235403eba5805/-84.0cfd/-4b.15aa,27.b/-6e.6185/-43.1cec,3.3dbef0cdb687fe-f/-6e.6185/-4e.897,3.3dbef0cdb687fe-f/-84.0cfd/-57.161774d253ff,2d.e944674ac01/-9b.a023/-4e.897,3.3dbef0cdb687fe-f/-9b.a023/-5a.c86,4e.13fff2237c01/-9b.a023/-2d.e944674abff,4b.15aa/-84.0cfd/-2b.1847,43.4356c7e63001/-6e.6185/-27.63f41675f7fc,57.f3/-84.0cfd/2.179be9b898106de-f,4e.13fff2237c01/-6e.6185/2.179be9b898106de-f,4e.13fff2237c01/-9b.a023/2d.e944674ac01,4b.15aa/-84.0cfd/2b.235403eba5805,5a.c86/-9b.a023/2.179be9b898106de-f,43.4356c7e63001/-6e.6185/27.b,2b.235403eba5805/-84.0cfd/4b.32731da54c01,27.b/-6e.6185/43.1ced,2d.e944674ac01/-9b.a023/4e.13fff2237c01,3.3dbef0cdb687fe-f/-9b.a023/5a.c86,3.3dbef0cdb687fe-f/-84.0cfd/57.f3,3.3dbef0cdb687fe-f/-6e.6185/4e.13fff2237c01,-2b.1847/-84.0cfd/4b.32731da54c01,-27.63f41675f7fc/-6e.6185/43.1ced,-2d.643/-9b.a023/4e.13fff2237c01,-4e.897/-9b.a023/2d.e944674ac01,-4b.15aa/-84.0cfd/2b.235403eba5805,-43.1cec/-6e.6185/27.b,-57.f3/-84.0cfd/2.179be9b898106de-f,-4e.897/-6e.6185/2.179be9b898106de-f,-5a.c86/-9b.a023/2.179be9b898106de-f,3.3dbef0cdb687fe-f/-84.0cfd/-57.161774d253ff,3.3dbef0cdb687fe-f/-6e.6185/-4e.897,-27.a012317afff/-6e.6185/-43.1cec,-2b.1847/-84.0cfd/-4b.15aa,3.3dbef0cdb687fe-f/-9b.a023/-5a.c86,-2d.643/-9b.a023/-4e.897,-2b.1847/-84.0cfd/-4b.15aa,3.3dbef0cdb687fe-f/-84.0cfd/-57.161774d253ff,3.3dbef0cdb687fe-f/-9b.a023/-5a.c86,-2d.643/-9b.a023/-4e.897,-27.a012317afff/-6e.6185/-43.1cec,3.3dbef0cdb687fe-f/-6e.6185/-4e.897,-4b.15aa/-84.0cfd/-2b.1847,-43.1cec/-6e.6185/-27.63f41675f7fc,-4e.897/-6e.6185/2.179be9b898106de-f,-57.f3/-84.0cfd/2.179be9b898106de-f,-4e.897/-9b.a023/-2d.e944674abff,-5a.c86/-9b.a023/2.179be9b898106de-f,-57.f3/-84.0cfd/2.179be9b898106de-f,-4b.15aa/-84.0cfd/-2b.1847,-4e.897/-9b.a023/-2d.e944674abff,-5a.c86/-9b.a023/2.179be9b898106de-f,-4e.897/-6e.6185/2.179be9b898106de-f,-43.1cec/-6e.6185/-27.63f41675f7fc,5a.59d/-9a.3feed4812602/0.010d701403c40ff,57.042/-83.1dac19892a02/0.010d701403c40ff,4b.ec1/-83.1dac19892a02/-2b.20a241290c7fa,4e.02b/-9a.3feed4812602/-2d.66ae946527fc,43.1603/-6d.315a8e0c7a01/-27.0271,4e.02b/-6d.315a8e0c7a01/0.010d701403c40ff,4b.ec1/-83.1dac19892a02/-2b.20a241290c7fa,57.042/-83.1dac19892a02/0.010d701403c40ff,-1f.350a6460a37fc/-3e.2d2934a2e601/37.c1b,3.3dbef0cdb687fe-f/-5e.014974928601/2.179be9b898106de-f,-3f.313e52fc4d7fb/-3e.2d2934a2e601/2.179be9b898106de-f,-5a.c86/19.1508356911ff/2.179be9b898106de-f,-2d.643/19.1508356911ff/4e.13fff2237c01,-3f.313e52fc4d7fb/80.56ea75e0c202/2.179be9b898106de-f,-1f.350a6460a37fc/80.56ea75e0c202/37.c1b,3.3dbef0cdb687fe-f/9b.a023/2.179be9b898106de-f,1f.2474/80.56ea75e0c202/37.c1b,2d.e944674ac01/19.1508356911ff/4e.13fff2237c01,1f.2474/-3e.2d2934a2e601/37.c1b,3f.21d7/-3e.2d2934a2e601/2.179be9b898106de-f,5a.c86/19.1508356911ff/2.179be9b898106de-f,3f.21d7/80.56ea75e0c202/2.179be9b898106de-f,1f.2474/80.56ea75e0c202/-37.c1a,2d.e944674ac01/19.1508356911ff/-4e.897,1f.2474/-3e.2d2934a2e601/-37.c1a,-1f.350a6460a37fc/-3e.2d2934a2e601/-37.c1a,-2d.643/19.1508356911ff/-4e.897,-1f.350a6460a37fc/80.56ea75e0c202/-37.c1a";
			var geo0uvs:String ="0.4e4f1/0.ce9cf,0.42291/0.ce90e,0.41fc4/0.1d63,0.4e20b/0.b6e81,0.57a2/0.ce5a6,0.369d1/0.b9d28,0.42127/0.e4d2d,0.36b0f/0.16a18,0.4e37a/0.16f73,0.e0090/0.360c7,0.d46bf/0.366d0,0.d6ade/0.2228e,0.e25f5/0.21115,0.ca2cd/0.379ab,0.cc32f/0.3be5,0.d459a/0.4dd55,0.ca1c7/0.4c974,0.dff62/0.4e483,0.e22bb/0.63463,0.d67bf/0.9cfa,0.cc064/0.5ec55,0.bf231/0.b958b,0.b4141/0.bacbe,0.b491d/0.a91e7,0.bfaf5/0.10902,0.cb2a2/0.b8d39,0.cbbb6/0.a46a2,0.cb2f8/0.d108e,0.bf283/0.d0bac,0.bfbd6/0.e5839,0.b49e7/0.e2655,0.b418b/0.cfc2d,0.cbc9f/0.e68d6,0.9b91c/0.c7b4e,0.9ab0d/0.d3dd9,0.85a2d/0.21e6,0.d609/0.c7b4d,0.9a715/0.dfdf9,0.8790d/0.dfdf9,0.dfc43/0.0182c7,0.df661/0.0c08b,0.184ed/0.0c0ff,1/0.01833f,0.e15f7/0,0.26e2/0.00068,0.15391/0.70b75,0.e89e3/0.70b47,0.e88af/0.7cb43,0.d6433/0.7cb6c,0.d467e/0.a0e2,0.e9839/0.648a4,0.16401/0.0c021,0.ca1c7/0.0bff8,0.cc24c/0,0.de6d1/0.000025,0.df661/0.0182c3,0.ca49b/0.018298,0.16b6f/0.a46a2,0.e30df/0.bb751,0.d6f9b/0.bb943,0.d7105/0.a5524,0.cbc9f/0.bbdc7,0.cbde3/0.a7e7d,0.d7268/0.d27a5,0.cbf21/0.d0644,0.e33c6/0.d32a0,0.e3a42/0.e52ec,0.158de/0.e3e1f,0.cc4bf/0.dfff1,0.a80f0/0.a5c0c,0.a5bdd/0.b94bc,0.9b91c/0.bae83,0.9da5a/0.a962a,0.b3b62/0.a46a2,0.b1500/0.b8a5a,0.11bb4/0.d0d62,0.a5be4/0.d0a94,0.9b923/0.cfdb0,0.10ce7/0.16f57,0.9da6d/0.e29e2,0.b3b79/0.e6804,0.013e8/0.e4a2e,0.0c1a3/0.cf1ce,0.018485/0.cee21,0.189c3/0.e3ac5,0.23ca1/0.cdfc9,0.24154/0.e0a05,0.188cb/0.b7806,0.24075/0.b905f,0.0c60e/0.b6e81,0.5a508/0.c8150,0.5a3e4/0.df7d5,0.4e4f1/0.de3e3,0.4e5f7/0.c941a,0.6681a/0.c7b4d,0.666eb/0.dff09,0.7ea6f/0.dfe55,0.b727/0.df89d,0.7277e/0.c82c5,0.7ea67/0.c7b4d,0.66821/0.de32e,0.6681a/0.c9401,0.d4b99/0.98d87,0.e86ce/0.97e19,0.e5e46/0.1a2b,0.15391/0.a46a2,0.d43c7/0.8cab8,0.e8a1a/0.8babe,0.36991/0.b8b5b,0.35ddc/0.c4daa,0.248b7/0.c31cb,0.24aa5/0.b6e81,0.369d1/0.d0677,0.27155/0.ced7a,0.0b535/0.65ef8,0.0b511/0.71dc1,0.0b44d/0.723a9,0.0b471/0.a3b0,0.012c9/0.7d530,0.0bb88/0.65f0f,0.0c150/0.65ef8,0.0c1a3/0.7d51a,0.0002bb/0.664e1,0.0002b3/0.7260b,0.0001eb/0.72022,0.0001f3/0.65ef8,0.30ce1/0.e81c6,0.309fb/0.d0677,0.30fd0/0.d06c3,0.312b6/0.e8212,0.0bb09/0.65f4e,0.0bb88/0.c3fb,0.0b5b4/0.7a778,0.00013d/0.7280a,0.000110/0.664e5,0.0001be/0.65ef8,0.0001eb/0.7221e,0.becbb/0.d0bc3,0.bec68/0.b95a1,0/0.71b37,0.000044/0.65ef8,0.000110/0.664df,0.000cd/0.b683,0.24b84/0.e76cb,0.248b7/0.d0869,0.b3bc2/0.cfc44,0.b3b79/0.12ae2,0.4e4f1/0.80e34,0.2d393/0.7afc1,0.3dacd/0.9ba2f,0.a1709/0.0001a,0.9b5c9/0.2d478,0.ca1c7/0.2d308,0.c27f2/0,0.a1be8/0.63463,0.c2cd1/0.6335f,0.15391/0.9338e,0.d4302/0.7348f,0.122c7/0.80eae,0.b7f0b/0.a46a2,0.4e4f1/0.3477b,0.44753/0.0026a,0.247a0/0,0.2114a/0.32558,0.44c1c/0.62fb0,0.24c69/0.6178c,0.3dd6e/0.66098,0.1cbc7/0.65ef8,0/0.38a5a,0.0d625/0.65ef8,0.4e4f1/0.e72b,0.5b0b3/0.c632f,0.7156e/0.c7a6d,0.6dd6f/0.9288d,0.f8fa/0.95ab7,0.9b91c/0.75bb9,0.91ace/0.c7b4d,0.9b91c/0.929ca,0.b74a/0.648a4,0.92e44/0.64984,0.0c1a3/0.80af4,0.2db7/0.9b88f,0.952ba/0.610d9,0.9b5c9/0.35fef,0.6db5d/0.3aed7,0.74e3e/0.648a4,0.e42d/0,0.b087/0.037cc,0.b7dbb/0.648a4,0.58202/0.000126,0.4e4f1/0.3618e,0.015a1d/0.b6c34,0.6d84/0.b6e81";
			var geo0faces:String ="0,1,2,0,1,2,3,0,2,3,0,2,4,5,1,1,4,5,0,4,1,2,1,5,6,4,0,6,7,4,7,6,0,1,6,4,7,0,3,8,6,1,8,7,3,0,8,1,9,7,8,9,a,b,a,9,8,c,9,b,b,6,7,a,d,e,9,b,7,b,a,e,c,b,9,f,10,d,d,c,9,a,f,d,d,9,a,11,f,a,e,d,a,9,11,a,f,d,e,12,13,f,10,f,e,11,12,f,11,c,d,13,14,10,f,11,d,f,13,10,12,11,f,15,16,17,13,12,f,18,15,17,13,f,10,19,15,18,14,13,10,1a,19,18,15,13,14,1b,1c,15,16,15,14,19,1b,15,17,18,15,1d,1e,1f,19,17,15,1c,1d,1f,19,15,16,20,1d,1c,1a,19,16,1b,20,1c,1b,19,1a,21,22,23,1c,1b,1a,24,21,23,1d,17,19,22,25,26,1b,1d,19,23,22,26,1e,1f,20,27,28,29,21,1e,20,2a,27,29,22,23,1f,28,2b,2c,1e,22,1f,29,28,2c,24,25,26,2d,2e,2f,27,24,26,30,2d,2f,28,24,27,31,32,2e,29,28,27,2d,31,2e,2a,2b,2c,33,34,35,2d,2a,2c,36,33,35,2e,2a,2d,37,38,34,2f,2e,2d,33,37,34,30,31,2a,39,3a,3b,2e,30,2a,3c,39,3b,31,32,2b,3c,3b,3d,2a,31,2b,3e,3c,3d,33,34,32,3b,3f,40,31,33,32,3d,3b,40,35,36,33,41,42,43,37,35,33,3f,41,43,36,38,34,3f,43,44,33,36,34,40,3f,44,39,3a,38,45,46,47,36,39,38,48,45,47,3b,39,36,49,4a,46,35,3b,36,45,49,46,3c,3d,39,4a,4b,4c,3b,3c,39,46,4a,4c,3d,3e,3a,46,4c,4d,39,3d,3a,47,46,4d,3f,40,3e,4c,4e,4f,3d,3f,3e,4d,4c,4f,41,3f,3d,4b,50,4e,3c,41,3d,4c,4b,4e,42,43,3f,51,52,53,41,42,3f,54,51,53,43,44,40,54,53,55,3f,43,40,56,54,55,45,46,44,53,57,58,43,45,44,55,53,58,47,45,43,52,59,57,42,47,43,53,52,57,48,49,4a,5a,5b,5c,4b,48,4a,5d,5a,5c,4c,48,4b,5e,5f,5b,4d,4c,4b,5a,5e,5b,4e,4f,50,60,61,62,51,4e,50,63,60,62,52,53,4f,61,64,65,4e,52,4f,62,61,65,54,55,56,66,67,68,57,54,56,69,66,68,58,54,57,6a,6b,67,59,58,57,66,6a,67,5a,5b,5c,6c,6d,6e,5d,5a,5c,6f,6c,6e,5e,5f,5b,6d,70,71,5a,5e,5b,6e,6d,71,60,37,33,72,73,74,61,60,33,75,72,74,61,33,31,76,77,78,62,61,31,79,76,78,62,31,30,7a,7b,7c,63,62,30,7d,7a,7c,63,30,37,7e,7f,80,60,63,37,81,7e,80,64,18,12,82,83,84,65,64,12,72,82,84,66,15,18,85,86,87,64,66,18,88,85,87,67,13,15,89,8a,15,66,67,15,1c,89,15,65,12,13,8b,8c,8d,67,65,13,8e,8b,8d,60,61,62,7f,7e,8f,63,60,62,90,7f,8f,64,65,67,89,91,92,66,64,67,8a,89,92,68,69,6a,93,94,95,6a,6b,6c,96,97,98,68,6a,6c,99,96,98,6b,6d,6e,97,9a,9b,6c,6b,6e,98,97,9b,6e,6d,6f,9c,9d,9e,70,6e,6f,9f,9c,9e,6c,6e,70,a0,a1,a2,71,6c,70,a3,a0,a2,68,6c,71,a4,a0,a3,72,68,71,a5,a4,a3,72,69,68,a6,94,93,73,69,72,a7,94,a6,72,71,74,a5,a3,a8,73,72,74,a9,a5,a8,71,70,75,aa,ab,ac,74,71,75,ad,aa,ac,75,70,6f,ae,9f,9e,76,75,6f,af,ae,9e,74,75,76,ad,ac,b0,77,74,76,b1,ad,b0,73,74,77,b2,ad,b1,78,73,77,b3,b2,b1,78,69,73,b4,94,a7,79,69,78,b5,94,b4,78,77,7a,b6,b7,b8,79,78,7a,b9,b6,b8,77,76,7b,b7,ba,bb,7a,77,7b,b8,b7,bb,7b,76,6f,bc,af,9e,6d,7b,6f,9d,bc,9e,7a,7b,6d,b8,bb,bd,6b,7a,6d,be,b8,bd,79,7a,6b,b5,bf,c0,6a,79,6b,95,b5,c0,6a,69,79,95,94,b5";
			var geo0:FacesDefinition = new FacesDefinition();
			geo0.f = buildFaces( geo0faces.split(","),  buildVertices(read(geo0vert).split(",")), buildUVs(read(geo0uvs).split(",")) );
			geos.push(geo0);
		}

		private function buildFaces(aFaces:Array, vVerts:Vector.<Vertex>, vUVs:Vector.<UV>):Vector.<Face>
		{
			var vFaces:Vector.<Face> = new Vector.<Face>();
			var f:Face;
			for(var i:int = 0;i<aFaces.length;i+=6){
				f = new Face( vVerts[parseInt(aFaces[i], 16)],
									vVerts[parseInt(aFaces[i+1], 16)],
									vVerts[parseInt(aFaces[i+2], 16)],
									null,
									vUVs[parseInt(aFaces[i+3], 16)],
									vUVs[parseInt(aFaces[i+4], 16)],
									vUVs[parseInt(aFaces[i+5], 16)]);
				vFaces.push(f);
			}

			return vFaces;
		}

		private function buildVertices(aVerts:Array):Vector.<Vertex>
		{
			var tmpv:Array;
			var vVerts:Vector.<Vertex> = new Vector.<Vertex>();
			for(var i:int = 0;i<aVerts.length;i++){
				tmpv = aVerts[i].split("/");
				vVerts[i] = new Vertex( parseFloat(tmpv[0])*_scale, parseFloat(tmpv[1])*_scale, parseFloat(tmpv[2])*_scale  );
			}
			return vVerts;
		}

		private function buildUVs(aUvs:Array):Vector.<UV>
		{
			var tmpv:Array;
			var vUVs:Vector.<UV> = new Vector.<UV>();
			for(var i:int = 0;i<aUvs.length;++i){
				tmpv = aUvs[i].split("/");
				vUVs[i] = new UV(parseFloat(tmpv[0]), parseFloat(tmpv[1]));
			}

			return vUVs;
		}


		private function buildMaterials():void
		{
				var aw_0_Bitmap:Bitmap = new Aw_0_Bitmap_Bitmap();
				applyMaterialToMesh("aw_0", aw_0_Bitmap.bitmapData);

		}

		private function applyMaterialToMesh(id:String, bmd:BitmapData):void
		{
			for(var i:int;i<meshes.length;++i){
				if(meshes[i].name == id){
					if(!bmd){
						trace("Embed of "+id+" failed! Check source path or if CS4 call 911!");
					} else {
					meshes[i].material = new BitmapMaterial(bmd);
					}
					break;
				}
			}
		}

		private function cleanUp():void
		{
			for(var i:int = 0;i<1;++i){
				objs["obj"+i] == null;
			}
			aV = null;
			aU = null;
		}

		private function addContainers():void
		{
			aC = [];
			aC.push(this);
			var m0:Matrix3D = new Matrix3D();
			m0.rawData = Vector.<Number>([1,0,0,0,0,1,0,0,0,0,1,0,0*_scale,0*_scale,0*_scale,1]);
			transform = m0;
			name = "main";

		}

		public function get containers():Array
		{
			return aC;
		}


		public function get meshes():Array
		{
			return oList;
		}


		private function read(str:String):String
		{
			var start:int= 0;
			var chunk:String;
			var end:int= 0;
			var dec:String = "";
			var charcount:int = str.length;
			for(var i:int = 0;i<charcount;++i){
				if (str.charCodeAt(i)>=44 && str.charCodeAt(i)<= 48 ){
					dec+= str.substring(i, i+1);
				}else{
					start = i;
					chunk = "";
					while(str.charCodeAt(i)!=44 && str.charCodeAt(i)!= 45 && str.charCodeAt(i)!= 46 && str.charCodeAt(i)!= 47 && i<=charcount){
						i++;
					}
					chunk = ""+parseInt("0x"+str.substring(start, i), 16 );
					dec+= chunk;
					i--;
				}
			}
			return dec;
		}

	}
}
class FacesDefinition
{
	import away3d.core.base.Face;
	import away3d.core.base.Geometry;
	public var f:Vector.<Face>;
	public var geometry:Geometry;
}