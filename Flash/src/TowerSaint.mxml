<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"  xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:maps="com.google.maps.*" currentState="start" applicationComplete="initApp()" width="800" height="600" >
	<fx:Script>
		<![CDATA[
			import assets.PhotoAssets;
			
			import away3dlite.cameras.*;
			import away3dlite.containers.*;
			import away3dlite.core.base.*;
			import away3dlite.core.render.*;
			import away3dlite.events.*;
			import away3dlite.lights.DirectionalLight3D;
			import away3dlite.materials.*;
			import away3dlite.primitives.*;
			
			import com.facebook.graph.Facebook;
			import com.facebook.graph.controls.Distractor;
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.Map;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapMoveEvent;
			import com.google.maps.MapType;
			import com.google.maps.ProjectionBase;
			import com.google.maps.overlays.GroundOverlay;
			import com.google.maps.overlays.Marker;
			import com.google.maps.overlays.MarkerOptions;
			import com.google.maps.overlays.Polygon;
			import com.google.maps.overlays.PolygonOptions;
			import com.google.maps.styles.FillStyle;
			import com.google.maps.styles.StrokeStyle;
			
			import flash.display.*;
			import flash.events.*;
			import flash.net.*;
			import flash.utils.Dictionary;
			
			import managers.FocusPanelManager;
			import managers.GameManager;
			import managers.InitManager;
			import managers.UserObjectManager;
			import managers.states.TowerSaintServiceState;
			
			import models.Bounds;
			import models.Location;
			import models.Portal;
			import models.Road;
			import models.SuperObject;
			import models.Tower;
			import models.User;
			import models.states.ImageState;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.BitmapAsset;
			import mx.events.DragEvent;
			import mx.events.StateChangeEvent;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.ObjectProxy;
			import mx.utils.ObjectUtil;
			
			
			// The facebook data
			//protected var _sessionId:FacebookSessionUtil;
			protected var _facebook:Facebook;
			protected const API_KEY:String = "19c9fe5eb3168ff03f9277a78e88d095";
			protected const SECRET:String = "7daf6801550ed6972685d7f8f52b2136";
			[Bindable] protected var _user:User;
			[Bindable] public var _friends:Array = new Array();
			
			
			// The image data
			[Bindable] public var _photo:PhotoAssets = new PhotoAssets();
			
			// State/Manager data
			[Bindable] public var _serverState:TowerSaintServiceState;
			[Bindable] public var _userObjectManager:UserObjectManager;
			[Bindable] public var _focusPanelManager:FocusPanelManager;
			[Bindable] public var _initManager:InitManager;
			[Bindable] public var _gameManager:GameManager;
			
			
			// State variable
			[Bindable] private var finishedLoadingMap:Boolean = false;
			private var initializedInAppManagers:Boolean = false;
			[Bindable] public var imageState:ImageState = new ImageState();

			
			// Is desktop app?
			[Bindable] public var isDesktop:Boolean = true;
			
			// Init App
			protected function initApp() : void
			{
				// Initialize the basic objects
				
				this.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, onStateChange);
								
				// Initialize facebook
				if(!isDesktop){
					initFacebook();
				}	
				
				// Setup up the closing of the window
				ExternalInterface.addCallback("closeGame", onCloseGame);
			}
			
			public function onCloseGame() : void {
				if(this._userObjectManager != null){
					if(this._user != null){
						this._userObjectManager.closeGame(this._user);	
					}
				}
			}
			
			protected function onStateChange(s:StateChangeEvent) : void {
				if(this.currentState == "initUser"){
					this._initManager = new InitManager(this.map, this.locationChanger, this._userObjectManager,
						this, this._user, this._photo, this._focusPanelManager, this.buildButton);
					this._initManager.run();
				}else if(this.currentState == "inApp"  && s.oldState == "initUser"){
					// Get the initialization manager
					var capital:Tower = this._initManager.getNewCapital();
					this._gameManager = new GameManager(this._user, this.map, this._photo, this._focusPanelManager, this,
						this.sendButton, this.chatList, this.userList, this.userObjectList, this.chatText, this._userObjectManager,
					    this.mySprite);
					this._gameManager.runFromInitManager(capital);
					
				}
			}
			
			protected function initFacebook():void {
				Facebook.init("142447749129831", handleInit);
				Facebook.setCanvasAutoResize(true);
				Facebook.setCanvasSize(800, 600);
			}
			
			protected function initBaseObjects() : void {
				// Initialize the services needed with the server over amf
				this._focusPanelManager = new FocusPanelManager(focusImage, bodyText, titleText, _photo);
				this._serverState = new TowerSaintServiceState();
			}
			
			// Javascript event listeners
			protected function onAuthLogin(result:Object, fail:Object): void {
				Alert.show(result.toString() + ":" +  fail.toString());
			}
			
			protected function play() : void
			{
				this.currentState = "inApp";
				this.login();
				//init3DView();
			}
			
			protected function handleInit(success:Object, fail:Object) : void {
 				
			}
			
			protected function getMeHandler(response:Object, fail:Object) : void
			{	
				// Create the user
				var f_id:Number = parseInt(response.id);
				this._user = new User();
				this._user.initializeUserWithId(f_id);
				if(!isDesktop){
					this._userObjectManager.saveUser(this._user, onSaveUser);
				}

				
				// Save the text associated with the user
				//fb_name.text = response.name as String;
			}
			
			protected function login() : void {
				if(isDesktop){
					// Assume the user is logged in. Create an id, and run the program.
					getMeHandler({'id' : '500', 'name' : 'Desktop Test'}, {});
				}else{
					Facebook.login(loginHandler, {perms:"read_stream, publish_stream"});
				}
			} 
			
			protected function logout() : void {
				Facebook.logout(logoutHandler);
				//currentState = "start";
			}
			
			protected function loginHandler(success:Object, fail:Object) : void {
				if (success) {
					Facebook.api("/me", getMeHandler);
					// susrImage.source = Facebook.getImageUrl(success.uid, "small");
				} else {
					ExternalInterface.call("redirect","142447749129831", "read_stream,publish_stream","http://apps.facebook.com/TowerSaint/");
				}
			}
			
			protected function logoutHandler(response:Object, fail:Object) : void {
				
			}
			
			// Map handlers. The map handler gets called after you are logged
			// into facebook
			private function onMapReady(event:Event) : void {
				
				// Calculate the bounds of the map
				if(!initializedInAppManagers){
				
					
					// Initialize the object manager, and make the game user specific.
					this._focusPanelManager = new FocusPanelManager(focusImage, bodyText, titleText, _photo);
					this._serverState = new TowerSaintServiceState();
					this._userObjectManager = new UserObjectManager(this.map, this._user, this._serverState, this._photo, this._focusPanelManager, this);
	
	   				if(isDesktop){
						this._userObjectManager.saveUser(this._user, onSaveUser);
					}
					
					initializedInAppManagers = true;
				}
			}
			
			// Depending on the resuls from the server start the initialization manager or the game
			// manager
			protected function onSaveUser(event:ResultEvent) : void{
				var u:User = event.result as User;
				// If it returns the same user, then the user is new, and we should start the initManager
				if(!ObjectUtil.compare(this._user, u)){
					// Change the state
					currentState = "initUser";
				}else{
					this._user = u;
					this._gameManager = new GameManager(this._user, this.map, this._photo, this._focusPanelManager, this,
						this.sendButton, this.chatList, this.userList, this.userObjectList, this.chatText, this._userObjectManager,
						this.mySprite);
					this._gameManager.run();
				}
				
			}
		
			// Button handlers for the create amf objects
			protected function onImageClick(event:MouseEvent) : void {
				imageState.isClicked = true;
				var im:Image = event.currentTarget as Image;
				
				if(im.id == "towerImage"){
					imageState.endObject = new Tower();
				}else if(im.id == "portalImage"){
					imageState.endObject = new Portal();
				}else if(im.id == "roadImage"){
					imageState.endObject = new Road();
				}
			}
			
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="inApp"/>
		<s:State name="start"/>
		<s:State name="initUser"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:VGroup includeIn="inApp,initUser" top="50" left="0" right="0" bottom="0" top.inApp="10" left.inApp="171" bottom.inApp="10" right.inApp="10">
		<mx:MenuBar includeIn="inApp" width="619"></mx:MenuBar>
		<s:SpriteVisualElement id="mySprite"/>
			
		<maps:Map id="map" includeIn="inApp,initUser" width="619" height="80%" mapevent_mapready="onMapReady(event)" key="ABQIAAAA5PSKhvT9XxMwIJsiXZLnshROkT7oJpmGVVDvh2HNZs_1KkkwNxQMSTOQJaZvC41MHmPhrh-NHIDstw" sensor="false" width.inApp="619" height.inApp="419" width.initUser="793"/>
		<s:List includeIn="inApp" height="91" width="615" id="userObjectList" itemRenderer="HUserObjectRenderer">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
		</s:List>
		<s:HGroup includeIn="inApp" width="616" height="33">
			<s:TextInput width="537" id="chatText"/>
			<s:Button label="Send" id="sendButton"/>
		</s:HGroup>
	
	</s:VGroup>

	<s:Button includeIn="start" x="315" y="221" label="Play" click="play()"/>
	<s:Button includeIn="initUser" x="689" y="20" label="changeLocation" id="locationChanger"/>
	<s:Button includeIn="initUser" x="10" y="21" label="Build" id="buildButton"/>
	<s:VGroup includeIn="inApp" x="10" y="10" width="153" height="580">
		<mx:Image width="153" height="66" id="logo"  source="@Embed(source='assets/pictures/TowerSaintLogo.gif')"/>
		<s:List width="152" height="123" id="userList" itemRenderer="UserListRenderer"></s:List>
		<s:List width="150" id="chatList"></s:List>
		<mx:TabNavigator width="153" height="262" width.inApp="154">
			<s:NavigatorContent label="Inspect" width="100%" height="100%">
				<s:VGroup x="10" y="10" width="132" height="201">
					<s:HGroup width="138" height="71">
						<mx:Image width="61" height="65" id="focusImage"/>
						<s:RichEditableText height="66" id="titleText" width="60"/>
					</s:HGroup>
					<s:Scroller width="128" height="123">
						<s:RichEditableText x="6" y="11" width="113" height="123" id="bodyText" ></s:RichEditableText>
					</s:Scroller>
				</s:VGroup>
			</s:NavigatorContent>
			<s:NavigatorContent label="Build" width="100%" height="100%">
				<s:List x="10" y="10" width="132" height="209" id="buildObjectList" itemRenderer="BuildListItemRenderer">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<s:dataProvider>
						<mx:ArrayCollection>
							<fx:Object alias="Tower" icon="@Embed(source='assets/pictures/Tower_Level0.png')"/>
							<fx:Object alias="Portal" icon="@Embed(source='assets/pictures/Portal.png')"/>
							<fx:Object alias="Road" icon="@Embed(source='assets/pictures/NorthSouthEastWestRoad.png')"/>
						</mx:ArrayCollection>
					</s:dataProvider>
				</s:List>
			</s:NavigatorContent>
			<s:NavigatorContent label="Action" width="100%" height="100%">
			</s:NavigatorContent>
		</mx:TabNavigator>
	</s:VGroup>
	
	
</s:Application>
