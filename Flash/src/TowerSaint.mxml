<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="955" minHeight="600" xmlns:maps="com.google.maps.*" currentState="start" width.inApp="1271" minWidth.inApp="1000">
	<fx:Script>
		<![CDATA[
			import assets.PhotoAssets;
			
			import away3dlite.cameras.*;
			import away3dlite.containers.*;
			import away3dlite.core.base.*;
			import away3dlite.core.render.*;
			import away3dlite.events.*;
			import away3dlite.lights.DirectionalLight3D;
			import away3dlite.materials.*;
			import away3dlite.primitives.*;
			
			import com.facebook.Facebook;
			import com.facebook.commands.friends.GetFriends;
			import com.facebook.commands.users.GetInfo;
			import com.facebook.data.friends.GetFriendsData;
			import com.facebook.data.users.FacebookUser;
			import com.facebook.data.users.FacebookUserCollection;
			import com.facebook.data.users.GetInfoData;
			import com.facebook.data.users.GetInfoFieldValues;
			import com.facebook.events.FacebookEvent;
			import com.facebook.net.FacebookCall;
			import com.facebook.utils.FacebookSessionUtil;
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.Map;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapType;
			import com.google.maps.ProjectionBase;
			import com.google.maps.overlays.GroundOverlay;
			import com.google.maps.overlays.Marker;
			import com.google.maps.overlays.MarkerOptions;
			import com.google.maps.overlays.Polygon;
			import com.google.maps.overlays.PolygonOptions;
			import com.google.maps.styles.FillStyle;
			import com.google.maps.styles.StrokeStyle;
			
			import flash.display.*;
			import flash.events.*;
			import flash.net.*;
			import flash.utils.Dictionary;
			
			import managers.FocusPanelManager;
			import managers.UserObjectManager;
			import managers.states.TowerSaintServiceState;
			
			import models.Bounds;
			import models.Location;
			import models.Portal;
			import models.Road;
			import models.SuperObject;
			import models.Tower;
			import models.User;
			import models.states.ImageState;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.BitmapAsset;
			import mx.events.DragEvent;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.AMFChannel;
			import mx.rpc.AbstractOperation;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			import mx.utils.ObjectProxy;
		
			
			// The facebook data
			protected var _sessionId:FacebookSessionUtil;
			protected var _facebook:Facebook;
			protected const API_KEY:String = "19c9fe5eb3168ff03f9277a78e88d095";
			protected const SECRET:String = "7daf6801550ed6972685d7f8f52b2136";
			[Bindable] protected var _user:FacebookUser = new FacebookUser();
			[Bindable] public var _friends:Array = new Array();
			
			// Away 3D data
			private var scene:Scene3D;
			private var camera:HoverCamera3D;
			private var renderer:BasicRenderer;
			private var view:View3D;
			private var light:DirectionalLight3D;
			private var listOfCannons:ArrayCollection = new ArrayCollection();
			
			// Map data			
			protected const latOffset:Number = .001;
			protected const lonOffset:Number = .001;
			private var initialMapDragCenter:LatLng;
			
			// My Cannonball
			private var sphere:Sphere;
			
			// The image data
			[Bindable] public var _photo:PhotoAssets = new PhotoAssets();
			
			// State/Manager data
			[Bindable] public var _serverState:TowerSaintServiceState;
			[Bindable] public var _userObjectManager:UserObjectManager;
			[Bindable] public var _focusPanelManager:FocusPanelManager;
			
			// State variable
			[Bindable] private var finishedLoadingMap:Boolean = false;
			[Bindable] public var imageState:ImageState = new ImageState();
			
			// Map handlers. The map handler gets called after you are logged
			// into facebook
			private function onMapReady(event:Event) : void {
				this.map.setCenter(new LatLng(42.366662,-71.106262), 11, MapType.NORMAL_MAP_TYPE);
				

				// Initialize the services needed with the server over amf
				this._focusPanelManager = new FocusPanelManager(focusImage, controlButton, bodyText, titleText, _photo);
				this._serverState = new TowerSaintServiceState();
				this._userObjectManager = new UserObjectManager(this.map, this._serverState, this._photo, this._focusPanelManager);
				
				// Get all objects within the bounds of the server.	
				var bounds:LatLngBounds = this.map.getLatLngBounds();
				this._userObjectManager.getAllObjectsWithinBounds(bounds);				

				// Set an event listener upon the complete loading of the information
				this.map.addEventListener(MapEvent.TILES_LOADED, onTilesLoaded);
				this.map.addEventListener(MapMouseEvent.CLICK, onMapMouseClick);
				this.map.addEventListener(MapMouseEvent.DRAG_START, onMapDragStart);
				this.map.addEventListener(MapMouseEvent.DRAG_END, onMapDragEnd);
			}
			
			// The drag events
			private function onMapDragStart(event:MapMouseEvent) : void {
				initialMapDragCenter = event.latLng;
				
			}
			
			private function onMapDragEnd(event:MapMouseEvent) : void {
				var finalDragPosition:LatLng = event.latLng;
				
				// The center of the map, and bounds
				var center:LatLng = this.map.getCenter();
				var bounds:LatLngBounds = this.map.getLatLngBounds();
				
				// Calculate the net distance to move
				var netLatitude:Number = bounds.getNorth() - bounds.getSouth();
				var netLongitude:Number = bounds.getWest() - bounds.getEast();
				
				// The net distance
				var netDragLongitude:Number = finalDragPosition.lng() - initialMapDragCenter.lng();
				var netDragLatitude:Number = finalDragPosition.lat() - initialMapDragCenter.lat();
				
				// The new center position
				var newCenterLatitude:Number;
				var newCenterLongitude:Number;
				
				if(Math.abs(netDragLongitude) > Math.abs(netDragLatitude)) {
					if(netDragLongitude > 0.0){
						newCenterLatitude = center.lat();
						newCenterLongitude = center.lng() + netLongitude;
					}else{
						newCenterLatitude = center.lat();
						newCenterLongitude = center.lng() - netLongitude;	
					}
				}else{
					if(netDragLatitude > 0.0){
						newCenterLatitude = center.lat() + netLatitude;
						newCenterLongitude = center.lng();
					}else{
						newCenterLatitude = center.lat() - netLatitude;
						newCenterLongitude = center.lng();
					}
				}
				
				// Create the new position, and pan to the new position
				var newCenter:LatLng = new LatLng(newCenterLatitude, newCenterLongitude);
				this.map.panTo(newCenter);
			}
			
			// Create the basic polygon
			private function createBasicScopePolygon(loc:LatLng) : void {
				var latlng:LatLng = loc
				var lat:Number = latlng.lat();
				var lon:Number = latlng.lng();
				var polygon:Polygon = new Polygon([
					new LatLng(lat - latOffset, lon - lonOffset),
					new LatLng(lat - latOffset, lon + lonOffset),
					new LatLng(lat + latOffset, lon + lonOffset),
					new LatLng(lat + latOffset, lon - lonOffset),
					new LatLng(lat - lonOffset, lon - lonOffset)
				], 
					new  PolygonOptions({ 
						strokeStyle: new StrokeStyle({
							color: 0x0000ff,
							thickness: 10,
							alpha: 0.7}), 
						fillStyle: new FillStyle({
							color: 0x0000ff,
							alpha: 0.7})
					}));
				map.addOverlay(polygon);
			}
			

			
			private function onMapMouseClick(event:MapMouseEvent) : void {
				if(imageState.isClicked){
					// The image state
					imageState.isClicked = false;
					
					// The location
					var pos:LatLng = event.latLng;
					var obj:SuperObject = imageState.endObject as SuperObject;
					
					// The draw function
					obj.setPosition(pos);
					obj.draw(true, this.map, _photo, this._focusPanelManager);
					obj.setIsModified(true);
				
					// The control button for sending info
					controlButton.name = "Submit"
				}
			}
			
			private function onTilesLoaded(event:MapEvent) : void {
				finishedLoadingMap = true;
			}
			
		
			private function onControlButtonClicked(event:MouseEvent) : void{
				var but:Button = event.currentTarget as Button;
				if(but.name == "Submit"){
					
				}
			}
			
			
			// Button handlers for the create amf objects
			protected function onImageClick(event:MouseEvent) : void {
				imageState.isClicked = true;
				var im:Image = event.currentTarget as Image;
				
				if(im.id == "towerImage"){
					imageState.endObject = new Tower();
				}else if(im.id == "portalImage"){
					imageState.endObject = new Portal();
				}else if(im.id == "roadImage"){
					imageState.endObject = new Road();
				}
			}
			

			// The button handlers
			protected function loginBtnClickHandler(event:MouseEvent) : void {
				_sessionId = new FacebookSessionUtil(API_KEY, SECRET, loaderInfo);
				_facebook = _sessionId.facebook;
				_sessionId.addEventListener(FacebookEvent.CONNECT, onFacebookConnect);
				_sessionId.addEventListener(FacebookEvent.WAITING_FOR_LOGIN, onWaitLogin);
				_sessionId.addEventListener(FacebookEvent.ERROR, onError);
				_sessionId.login();
			}
			
			protected function onError(event:FacebookEvent) : void {
				var alert:Alert = Alert.show(event.error.errorMsg, "Error!!");
			}
			
			protected function logoutBtnClickHandler(event:MouseEvent) : void {
				_sessionId.logout();
				currentState = "start";
				_user = new FacebookUser();

			}
			
			// The facebook handlers
			protected function onWaitLogin(event:FacebookEvent):void {
				var alert:Alert = Alert.show("Click OK afer you log in Facebook", "Waiting for login");
				alert.addEventListener(Event.CLOSE, onClose);
			}
			

			
			protected function onClose(event:Event):void{
				_sessionId.validateLogin();	
			}
			
			protected function onFacebookConnect(event:FacebookEvent) : void {
				if(event.success){
					currentState = "inApp";
					
					// Initialize the 3D view
					init3DView();
					
					// Get the user information
					var call:FacebookCall = _facebook.post(new GetInfo([_facebook.uid], [GetInfoFieldValues.ALL_VALUES]));
					call.addEventListener(FacebookEvent.COMPLETE, onGetInfo);
					
					// Get the friend list
					var friendListCall:FacebookCall = _facebook.post(new GetFriends(null, _facebook.uid));
					friendListCall.addEventListener(FacebookEvent.COMPLETE, onGetFriendsList);
				}else{
					Alert.show("Error connecting to Facebook" + event.error.rawResult , "Error" + event.error.errorCode);
				}
				
			}
			
			protected function onGetInfo(event : FacebookEvent) : void {
				
			}
				
			protected function onGetFriendsList(event:FacebookEvent) : void {
				var _friendsUid:Array = new Array();
				var users:FacebookUserCollection = (event.data as GetFriendsData).friends;
				
				// Iterate over the users
				for(var i:int; i < users.length; i++){
					_friendsUid.push((users.getItemAt(i) as FacebookUser).uid);
				}
				
				var friendsDetailsCall:FacebookCall = _facebook.post(new GetInfo(_friendsUid, [GetInfoFieldValues.ALL_VALUES]));
				friendsDetailsCall.addEventListener(FacebookEvent.COMPLETE, onFriendsGetInfo);
			}
		
			protected function onFriendsGetInfo(event:FacebookEvent) : void {
				var users:FacebookUserCollection = (event.data as GetInfoData).userCollection;
				for(var i:int; i < users.length; i++){
					var userInfoObject:Object = users.getItemAt(i);
					_friends.push(userInfoObject.first_name as String);
				}
				// Setup up the data provider
				friendsDetailGrid.dataProvider = _friends;
			}
			
			// Away3D information
			private function init3DView() : void {
				// I am only initializing objects, since the 3D aspects of the
				// game have no user interactions
				initEngine();
				initObjects();
				initListeners();
			}
			
			private function initEngine() : void {
				// Create the scene
				scene = new Scene3D();
				
				// Create the camera
				camera = new HoverCamera3D();
				camera.focus = 50;
				camera.distance = 1000;
				camera.minTiltAngle = 0;
				camera.maxTiltAngle = 180;
				camera.panAngle =90;
				camera.tiltAngle = 180;
				camera.hover(true);
				
				// Create the renderer
				renderer = new BasicRenderer();
				
				// Create the view
				view = new View3D();
				view.scene = scene;
				view.camera = camera;
				view.renderer = renderer;
				
				// Add the children to the sprite
				mySprite.addChild(this.map);
				mySprite.addChild(view);
			}
			
			private function initObjects() : void {
				// Create a new material 
				
				var towerIcon:BitmapAsset = new _photo.cannonMaterial() as BitmapAsset;
				var towerData:BitmapData = towerIcon.bitmapData;
				var cannonMaterial:BitmapMaterial = new BitmapMaterial(towerData);
				cannonMaterial.smooth = true;
				// Create the sphere
				sphere = new Sphere();
				sphere.x = 100;
				sphere.y = 0;
				sphere.z = 100;
				sphere.radius = 150;
				sphere.segmentsH = 12;
				sphere.segmentsW = 12;
				sphere.name = "mySphere";
				sphere.material = cannonMaterial;
				scene.addChild(sphere);
			}
			
			// Setup the listeners
			private function initListeners() : void {
				// Setup some event listeners
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
				focusPanel.addEventListener(Event.RESIZE, onResize);
				onResize();
			}
			
			// Resize the window
			private function onResize(event:Event=null):void {
				view.x = focusPanel.width / 2;
				view.y = focusPanel.height / 2;
			}
			
			// Enter the frame
			private function onEnterFrame(event:Event) : void {
				if(finishedLoadingMap){
					//camera.hover();
					
					// Change the z position of the sphere
					//sphere.z = (sphere.z + 10) % 100 - 100
					
					
					//view.render();
				}
			}
			
			
			
			protected function onSendButtonClicked(event:MouseEvent) : void {
				// The network connection
				var netConnection:NetConnection = new NetConnection();
				netConnection.connect("http://localhost:8083/");
				
				// The responseder
				var responder:Responder = new Responder(onSendButtonComplete, onSendButtonFail);
				netConnection.call("myservice.echo", responder, sendServer.text);
			}
			
			protected function onSendButtonComplete(results : String): void {
				reponseServer.text = results;	
			}
			
			protected function onSendButtonFail(results : Object) : void {
				for each(var thisResult in results){
					reponseServer.text += thisResult;
				}
			}
		]]>
	</fx:Script>
	<s:states>
		<s:State name="inApp"/>
		<s:State name="start"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:Panel x="231" y="76" width="100%" height="100%" includeIn="inApp" id="visPanel">
		<s:SpriteVisualElement id="mySprite"/>
		<maps:Map x="0" y="0" id="map" width="100%" height="100%" mapevent_mapready="onMapReady(event)" key="ABQIAAAA5PSKhvT9XxMwIJsiXZLnshT2yXp_ZAY8_ufC3CFXhHIE1NvwkxSamfgDn9m0J6XvaIp6AGWbB8RA4A"/>
	</s:Panel>
	<s:Button includeIn="start" x="67" y="53" label="Login" id="loginButton" click ="loginBtnClickHandler(event)"/>
	<s:Label includeIn="inApp" x="44" y="30" text="Welcome {_user.name}"/>
	<mx:DataGrid includeIn="inApp" x="194" y="10" height="58" width="270" id="friendsDetailGrid">
		<mx:columns>
			<mx:DataGridColumn headerText="First Name" dataField="col1"/>
		</mx:columns>
	</mx:DataGrid>
	<s:Button includeIn="inApp" x="488" y="30" label="Logout" click="logoutBtnClickHandler(event)"/>
	<s:Panel includeIn="inApp" x="5" y="76" width="218" height="514" id="focusPanel">
		<mx:Image x="10" y="10" width="114" height="114" id="focusImage"/>
		<s:Button x="136" y="450" label="Upgrade" id="controlButton" click="onControlButtonClicked(event)"/>
		<s:RichEditableText x="10" y="132" width="196" height="310" id="bodyText"/>
		<s:RichEditableText x="132" y="10" height="114" id="titleText" width="74"/>
	</s:Panel>
	<s:TextInput includeIn="inApp" x="688" y="10" id="sendServer"/>
	<s:TextInput includeIn="inApp" x="688" y="40" id="reponseServer"/>
	<s:Label includeIn="inApp" x="599" y="18" text="Send"/>
	<s:Label includeIn="inApp" x="599" y="48" text="Response"/>
	<s:Button includeIn="inApp" x="856" y="11" label="Send" id="sendButton" click="onSendButtonClicked(event)"/>
	<s:HGroup includeIn="inApp" x="975" y="10" width="151" height="58">
		<mx:Image id = "towerImage" width="44" height="57" useHandCursor="true" buttonMode="true" click="onImageClick(event)"
				  source="file:/Users/danielo/Documents/Adobe Flash Builder 4/TOWERSAINT/SRC/assets/pictures/Tower_Level0.png"/>
		<mx:Image id = "portalImage" width="44" height="57" useHandCursor="true" buttonMode="true" click="onImageClick(event)" 
				  source="file:/Users/danielo/Documents/Adobe Flash Builder 4/TOWERSAINT/SRC/assets/pictures/Portal.png"/>
		<mx:Image id = "roadImage" width="44" height="57" useHandCursor="true" buttonMode="true" click="onImageClick(event)" 
				  source="file:/Users/danielo/Documents/Adobe Flash Builder 4/TOWERSAINT/SRC/assets/pictures/NorthSouthEastWestRoad.png"/>
	</s:HGroup>
</s:Application>
